/* 1 Nom des lieuxqui finissent par'um'. */
-- SELECT *
-- FROM lieu 
-- WHERE nom_lieu LIKE '%um'

/* 2 Nombre de personnagespar lieu (trié par nombre de personnages décroissant). */
-- SELECT COUNT(id_personnage) AS nombre_d_habitant,id_lieu
-- FROM personnage
-- GROUP BY id_lieu
-- ORDER BY COUNT(id_personnage) DESC 

/* 3 Nom des personnages+ spécialité + adresse et lieu d'habitation, triés par lieu puis par nom de personnage. */
-- SELECT nom_personnage, id_specialite, adresse_personnage , id_lieu
-- FROM personnage
-- ORDER BY id_lieu, nom_personnage

/* 4 Nom  des  spécialités  avec  nombre  de personnages par spécialité  (trié  par  nombre  de personnages décroissant). */
-- SELECT specialite.nom_specialite, personnage.id_specialite, COUNT(nom_personnage)
-- FROM specialite, personnage
-- WHERE personnage.id_specialite = specialite.id_specialite
-- GROUP BY personnage.id_specialite
-- ORDER BY COUNT(personnage.id_specialite) DESC

/* 5 Nom,date et lieu des batailles, classées de la plus récente à la plus ancienne (dates affichées au format jj/mm/aaaa). */
-- SELECT nom_bataille AS 'Nom de la bataille', DATE_FORMAT(date_bataille, "%d/%m/%Y") AS 'Date', lieu.nom_lieu AS 'Lieu'
-- FROM bataille, lieu
-- WHERE bataille.id_lieu = lieu.id_lieu
-- ORDER BY date_bataille DESC

/* 6 Nom des potions + coût de réalisation de la potion (trié par coût décroissant). */
-- SELECT nom_potion AS 'Potion', SUM(cout_ingredient * qte) AS 'Cout de réalisation'
-- FROM potion, composer, ingredient
-- WHERE potion.id_potion = composer.id_potion AND composer.id_ingredient = ingredient.id_ingredient
-- GROUP BY potion.id_potion
-- ORDER BY SUM(cout_ingredient * qte) DESC

/* 7 Nom des ingrédients + coût + quantité de chaque ingrédient qui composent la potion 'Santé'. */
-- SELECT nom_ingredient AS 'Ingrédient', cout_ingredient AS 'Cout/u', qte AS 'Quantité'
-- FROM potion,composer,ingredient
-- WHERE potion.id_potion = composer.id_potion AND composer.id_ingredient = ingredient.id_ingredient AND nom_potion = 'Santé'

/* 8 Nom du ou des personnages qui ont pris le plus de casques dans la bataille 'Bataille du village gaulois'. */
-- SELECT personnage.nom_personnage AS perso, SUM(qte) AS total
-- FROM prendre_casque, personnage, bataille
-- WHERE prendre_casque.id_personnage = personnage.id_personnage
-- AND prendre_casque.id_bataille = bataille.id_bataille
-- AND nom_bataille = 'Bataille du village gaulois'
-- AND qte = (
-- SELECT MAX(qte)
-- FROM prendre_casque
-- )
-- GROUP BY perso

/* 9 Nom des personnages et leur quantité de potion bue (en les classant du plus grand buveur au plus petit). */
-- SELECT nom_personnage AS perso, sum(dose_boire) AS 'potion bue'
-- FROM personnage
-- INNER JOIN boire ON boire.id_personnage = personnage.id_personnage
-- GROUP BY perso
-- ORDER BY 'potion bue' DESC

/* 10 Nom de la bataille où le nombre de casques pris a été le plus important. */
-- SELECT bataille.nom_bataille AS 'nom de la bataille', SUM(qte) AS 'Quantité'
-- FROM prendre_casque
-- INNER JOIN bataille ON bataille.id_bataille = prendre_casque.id_bataille
-- GROUP BY nom_bataille
-- ORDER BY 'Quantité'
-- LIMIT 1

/* 11 Combien  existe-t-il  de  casques  de  chaque  type  et  quel  est  leur  coût  total  ?  (classés  par nombre décroissant) */
-- SELECT nom_type_casque, SUM(cout_casque) AS 'cout total'
-- FROM casque
-- INNER JOIN type_casque ON type_casque.id_type_casque = casque.id_type_casque
-- GROUP BY casque.id_type_casque
-- ORDER BY SUM(cout_casque) DESC

/* 12 Nom des potions dont un des ingrédients est le poisson frais. */
-- SELECT nom_potion
-- FROM potion
-- INNER JOIN composer ON composer.id_potion = potion.id_potion
-- INNER JOIN ingredient ON ingredient.id_ingredient = composer.id_ingredient
-- WHERE ingredient.nom_ingredient = 'Poisson frais'

/* 13 Nom du / des lieu(x) possédant le plus d'habitants, en dehors du village gaulois. */
-- SELECT nom_lieu AS 'nlieu',COUNT(id_personnage) AS population
-- FROM lieu
-- INNER JOIN personnage ON personnage.id_lieu = lieu.id_lieu
-- WHERE nom_lieu != 'Village gaulois'
-- GROUP BY nlieu
-- HAVING population >= ALL (
-- SELECT COUNT(p.id_personnage)
-- FROM lieu l
-- INNER JOIN personnage p ON p.id_lieu = l.id_lieu
-- WHERE nom_lieu != 'Village gaulois'
-- GROUP BY l.nom_lieu
--     )

/* 14 Nom des personnages qui n'ont jamais bu aucune potion */
-- SELECT nom_personnage
-- FROM personnage
-- LEFT JOIN boire ON boire.id_personnage = personnage.id_personnage
-- WHERE ISNULL(boire.id_personnage)

/* 15 Nom du / des personnages qui n'ont pas le droit de boire de la potion 'Magique'. */

